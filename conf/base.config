/*
vim: syntax=groovy
-*- mode: groovy;-*-
 * -------------------------------------------------
 *  Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */


/*
 * utils is shared between projects. Include it in the PATH so scripts are found.
 */
env.PATH = "$baseDir/utils:$PATH"

process {
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  time = 12.h

                              // 140: run time exceeded. We set it to the normal queue maximum.
                              // 130: memory limit exceeded.
  errorStrategy = { task.exitStatus == 130 ? 'retry' : 'finish' }
  maxRetries = 2
  maxErrors = '-1'

  // Process-specific resource requirements
  withName: irods {
    errorStrategy = 'ignore'
    memory = 2.GB
    maxForks = 30
  }
  withName: crams_to_fastq {
    errorStrategy = { task.exitStatus == 130 && task.attempt <= process.maxRetries ? 'retry' : 'ignore' }
    cpus = { check_max( 2 ** (1 + task.attempt), 'cpus' ) }
    memory = { check_max( 4.GB + 4.GB * (task.attempt-1), 'memory' ) }
  }
  withName: star {
    errorStrategy = { task.exitStatus == 130 ? 'retry' : 'ignore' }
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        // Note below grows to about 100GB on 2 retries.
    memory = { check_max( 40.GB * task.attempt * 1.6 ** (task.attempt - 1), 'memory' ) }
  }
  withName: featureCounts {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 2.GB + 6.GB * (task.attempt-1), 'memory' ) }
  }
  withName: merge_featureCounts {
    errorStrategy = 'ignore'
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }


  withName: makeSTARindex {
    cpus = { check_max( 10 * task.attempt, 'cpus' ) }
    memory = { check_max( 60.GB * task.attempt, 'memory' ) }
  }
  withName: makeSalmonIndex {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }
  withName: makeHISATindex {
    cpus = { check_max( 4 * task.attempt, 'cpus' ) }
    memory = { check_max( 42.GB * task.attempt, 'memory' ) }
  }
  withName: fastqc {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  }
  withName: trim_galore {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  }

  withName: salmon {
    cpus = { check_max( 4 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }
  withName: hisat2Align {
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 40.GB * task.attempt, 'memory' ) }
  }
  withName: hisat2_sortOutput {
    cpus = { check_max( 4 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
  }
  withName: rseqc {
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
  }
  withName: genebody_coverage {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
  }
  withName: preseq {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
  }
  withName: markDuplicates {
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  }
  withName: stringtieFPKM {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
  }
  withName: dupradar {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
  }

  withName: sample_correlation {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
  }
  withName: multiqc {
    executor = 'local'
  }
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 12.h
}
